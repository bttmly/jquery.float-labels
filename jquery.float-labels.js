// Generated by CoffeeScript 1.6.3
(function($) {
  var methods, settings;
  $.fn.floatLabels = function(method) {
    if (methods[method]) {
      return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
    } else if ($.isPlainObject(method) || !methods[method]) {
      return methods.make.apply(this, arguments);
    } else {
      return $.error("Method " + method + " does not exist on jQuery.floatLabels");
    }
  };
  settings = {};
  return methods = {
    make: function(options) {
      var defaults, hasVal;
      options || (options = {});
      defaults = {
        floatOn: "focus",
        activeClass: "float-label-active",
        filledClass: "float-label-filled",
        inputClass: "float-label-input"
      };
      settings = $.extend({}, defaults, options || {});
      hasVal = function(el) {
        if (el.value.length === 0) {
          return false;
        } else {
          return true;
        }
      };
      this.addClass(defaults.inputClass);
      return this.each(function(i, input) {
        var $input, $label;
        $input = $(input);
        $label = input.id ? $("[for='" + input.id + "']") : $("[for='" + input.name + "']");
        switch (settings.floatOn) {
          case "focus":
            $input.bind("focus.floatLabel", function() {
              return $label.addClass(settings.activeClass);
            }).bind("blur.floatLabel", function() {
              $label.removeClass(settings.activeClass);
              if (hasVal(this)) {
                return $label.addClass(settings.filledClass);
              } else {
                return $label.removeClass(settings.filledClass);
              }
            }).trigger("blur.floatLabel");
            break;
          case "entry":
            $input.bind("focus.floatLabel", function() {
              if (hasVal(this)) {
                return $label.addClass(settings.activeClass);
              }
            }).bind("blur.floatLabel", function() {
              if (hasVal(this)) {
                return $label.addClass(settings.filledClass).removeClass(settings.activeClass);
              }
            }).bind("keydown.floatLabel", function() {
              if (hasVal(this)) {
                return $label.addClass(settings.activeClass);
              } else {
                return $label.removeClass("" + settings.activeClass + " " + settings.filledClass);
              }
            }).trigger("blur.floatLabel");
            break;
          default:
            console.warn("Invalid floatOn option: " + settings.floatOn);
        }
        return this;
      });
    },
    destroy: function() {
      if (settings.inputClass) {
        this.removeClass(settings.inputClass);
      }
      this.each(function(i, input) {
        var $input, $label;
        $input = $(input);
        $label = input.id ? $("[for='" + input.id + "']") : $("[for='" + input.name + "']");
        $label.removeClass("" + settings.activeClass + " " + settingsfilledClass);
        return $input.unbind("focus.floatLabel").unbind("blur.floatLabel").unbind("keydown.floatLabel");
      });
      return this;
    }
  };
})(jQuery);
